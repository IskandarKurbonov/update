name: Update license

on:
#  push:

jobs:
  prepare:
    name: Prepare for ${{ matrix.repo }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - repo: "document-server-integration"
            name: "Update license in document-server-integration"

          - repo: "web-apps"
            name: "Update license in web-apps"

          - repo: "DocSpace-buildtools"
            name: "Update license in DocSpace-buildtools"

    steps:
      - name: Checkout update directory
        uses: actions/checkout@v4
        with:
          repository: 'IskandarKurbonov/update'
          path: 'update'
          ref: feature/some-fix

      - name: Checkout ${{matrix.repo}}
        uses: actions/checkout@v4
        with:
          repository: 'IskandarKurbonov/${{matrix.repo}}'
          path: '${{matrix.repo}}'
          ref: master
          token: '${{ secrets.TOKEN }}'

      - name: Set up Python 3.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install reuse
        run: |
          pip3 install reuse lint jinja2

      - name: Start update license
        id: matrix
        run: |
          FOLDERS=()
          for d in $(ls -d */); do
              FOLDERS+=($(basename ${d}))
            fi
          done
          echo "folders for update is: "
          echo "${FOLDERS[@]}"

          # Set new matrix for build job
          echo "folders=$(jq -c -n '$ARGS.positional' --args "${folders[@]}")" >> "$GITHUB_OUTPUT"

  update-license:
    name: "Update license in ${{matrix.repo}}"
    runs-on: ubuntu-latest
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix: 
        repo-name: ${{needs.prepare.outputs.export-reponame}}
    steps:
      - name: Repo files
        id: repo
        run: |
          cd update
          export REPO=${{matrix.repo-name}}
          ./update.sh
          tar -cvf ${{matrix.repo-name}}.tar ./${{matrix.repo-name}}
      - name: Upload artifact
        if: steps.repo.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.repo-name}}-artifact
          path: ${{matrix.repo-name}}.tar
      - name: extract repo.zip
        run: |
          mkdir -p ./artifacts/${{matrix.repo-name}}
          unzip ./${{matrix.repo-name}}/dist/plugin.zip -d ./artifacts/${{matrix.repo-name}}
      - name: Archive plugins artifacts separate
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.repo-name}}
          path: |
            ./artifacts/${{matrix.repo-name}}

  artifacts:
    name: "Make all in one archive"
    runs-on: ubuntu-latest
    if: success() || failure()
    needs: [update-license]
    steps:
      - run: mkdir -p ./repos
      
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./repos
          
      - name: Make all-in-one archive
        uses: actions/upload-artifact@v4
        with:
          name: All-in-one
          path: |
            ./repos

      # - name: Commit changes
      #   uses: EndBug/add-and-commit@v9
      #   with:
      #     cwd: ${{matrix.repo}}
      #     new_branch: feature/updater-license6
      #     author_name: github-actions[bot]
      #     author_email: github-actions[bot]@users.noreply.github.com
      #     message: Update license in ${{matrix.repo}}
